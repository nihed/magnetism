#!/usr/bin/python

from optparse import OptionParser
import os
import re
import sys

from ddm import DataModel
from dbus.mainloop.glib import DBusGMainLoop
import gobject
import gtk

DBusGMainLoop(set_as_default=True)

def on_name_change(resource):
    print "The name changed: ", resource.name

def on_self_change(resource):
    print "The resource changed: "
    #resource._dump()
    pass

def on_self_query_success(resource):
    resource._dump()
    resource.connect(on_name_change, "name")
    resource.connect(on_self_change)

def on_self_query_failure(code, message):
    print message

def on_buddy_changed(buddy):
    #buddy._dump()
    pass

def on_buddies_changed(global_resource):
    for buddy in global_resource.onlineBuddies:
        buddy.disconnect(on_buddy_changed) # In case we connected previously
        buddy.connect(on_buddy_changed)
        on_buddy_changed(buddy)
    
def on_global_query_success(global_resource):
    global_resource.connect(on_buddies_changed, "onlineBuddies")
    on_buddies_changed(global_resource)

def on_global_query_failure(code, message):
    print message
    
def on_connect():
    print "Connected"

    query = model.query_resource(model.self_id, "+;contacts +;contacters +;lovedAccounts +;email;aim")
    query.add_handler(on_self_query_success)
    query.add_error_handler(on_self_query_failure)
    query.execute()

    query = model.query_resource("online-desktop:/o/global", "onlineBuddies [+;icon]")
    query.add_handler(on_global_query_success)
    query.add_error_handler(on_global_query_failure)
    query.execute()

def on_disconnect():
    print "Disconnected"

class Tree:

    def __init__(self, ddm_model):
        self.__ddm_model = ddm_model
        self.__ddm_model.add_added_handler(self.__resource_added)

        self.__store = gtk.TreeStore(str, str)

        self.__view = gtk.TreeView(self.__store)
        self.__view.set_headers_clickable(True)

        renderer = gtk.CellRendererText()
        column = gtk.TreeViewColumn('Resource')
        column.pack_start(renderer)
        column.set_attributes(renderer, text=0)
        column.set_sort_column_id(0) ## which column in the model is used to sort this display column
        self.__view.append_column(column)

    def __on_resource_changed(self, resource):
        found_row = None
        for row in self.__store:
            if row[0] == resource.resource_id:
                found_row = row
                break
        if found_row:
            for (name, value) in resource.get_properties():
                self.__store.append(found_row.iter, [name, value])

    def __resource_added(self, resource):
        self.__store.append(None, [ resource.resource_id, None ] )
        resource.connect(self.__on_resource_changed, property=None)
        self.__on_resource_changed(resource)

    def get_widget(self):
        return self.__view
    

parser = OptionParser()
parser.add_option("-s", "--server", default=None, help="Desktop Data Model server to connect to (default is whichever one is running)")
(options, args) = parser.parse_args()
if len(args) > 0:
    parser.print_usage()
    sys.exit(1)

if options.server == "":
    options.server = None

#print "Using server: " + str(options.server)

model = DataModel(server_name=options.server)
model.add_connected_handler(on_connect)
model.add_disconnected_handler(on_disconnect)
if model.connected:
    on_connect()

window = gtk.Window()
tree = Tree(model)
treeview = tree.get_widget()
treeview.show()
window.add(treeview)

window.show()

loop = gobject.MainLoop()
loop.run()
