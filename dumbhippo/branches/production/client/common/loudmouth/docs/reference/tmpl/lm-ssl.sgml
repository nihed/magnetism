<!-- ##### SECTION Title ##### -->
LmSSL

<!-- ##### SECTION Short_Description ##### -->
SSL struct for SSL support in Loudmouth

<!-- ##### SECTION Long_Description ##### -->
<para>
Use this together with an #LmConnection to get the connection to use SSL. Example of how to use the #LmSSL API.
</para>
<informalexample><programlisting><![CDATA[
LmConnection *connection;
LmSSL        *ssl;

connection = lm_connection_new ("myserver");
ssl = lm_ssl_new (NULL, my_ssl_func, NULL, NULL);
lm_connection_set_ssl (connection, ssl);
...
]]></programlisting></informalexample>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### STRUCT LmSSL ##### -->
<para>
This should not be accessed directly. Use the accessor functions as described below.
</para>


<!-- ##### ENUM LmCertificateStatus ##### -->
<para>
Provides information of the status of a certain certificate.
</para>

@LM_CERT_INVALID: The certificate is invalid.
@LM_CERT_ISSUER_NOT_FOUND: The issuer of the certificate is not found.
@LM_CERT_REVOKED: The certificate has been revoked.

<!-- ##### ENUM LmSSLStatus ##### -->
<para>
Provides information about something gone wrong when trying to setup the SSL connection.
</para>

@LM_SSL_STATUS_NO_CERT_FOUND: The server doesn't provide a certificate.
@LM_SSL_STATUS_UNTRUSTED_CERT: The certification can not be trusted.
@LM_SSL_STATUS_CERT_EXPIRED: The certificate has expired.
@LM_SSL_STATUS_CERT_NOT_ACTIVATED: The certificate has not been activated.
@LM_SSL_STATUS_CERT_HOSTNAME_MISMATCH: The server hostname doesn't match the one in the certificate.
@LM_SSL_STATUS_CERT_FINGERPRINT_MISMATCH: The fingerprint doesn't match your expected.
@LM_SSL_STATUS_GENERIC_ERROR: Some other error.

<!-- ##### ENUM LmSSLResponse ##### -->
<para>
Used to inform #LmConnection if you want to stop due to an error reported or if you want to continue to connect.
</para>

@LM_SSL_RESPONSE_CONTINUE: Continue to connect.
@LM_SSL_RESPONSE_STOP: Stop the connection.

<!-- ##### USER_FUNCTION LmSSLFunction ##### -->
<para>
This function is called if something goes wrong during the connecting phase.
</para>

@ssl: An #LmSSL.
@status: The status informing what went wrong.
@user_data: User data provided in the callback.
@Returns: User should return #LM_SSL_RESPONSE_CONTINUE if connection should proceed and otherwise #LM_SSL_RESPONSE_STOP.


<!-- ##### FUNCTION lm_ssl_new ##### -->
<para>

</para>

@expected_fingerprint: 
@ssl_function: 
@user_data: 
@notify: 
@Returns: 


<!-- ##### FUNCTION lm_ssl_is_supported ##### -->
<para>

</para>

@Returns: 


<!-- ##### FUNCTION lm_ssl_get_fingerprint ##### -->
<para>

</para>

@ssl: 
@Returns: 


<!-- ##### FUNCTION lm_ssl_ref ##### -->
<para>

</para>

@ssl: 
@Returns: 


<!-- ##### FUNCTION lm_ssl_unref ##### -->
<para>

</para>

@ssl: 


