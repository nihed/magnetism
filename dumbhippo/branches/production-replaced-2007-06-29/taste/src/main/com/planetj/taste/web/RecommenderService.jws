/*
 * Copyright 2005 Sean Owen
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Yes, no package statement. Since this JWS file is deployed at the server
// root, it needs to not be in a package in order for Axis to find its generated
// class file properly

import com.planetj.taste.recommender.RecommendedItem;
import com.planetj.taste.recommender.Recommender;
import com.planetj.taste.web.RecommenderSingleton;

import java.util.List;

/**
 * <p>A JWS file which exposes a {@link Recommender} as a web service via Axis.
 * This service needs to be deployed alongside <code>RecommenderServlet</code>.</p>
 *
 * <p>This class exposes a subset of the {@link Recommender} API. In particular it
 * does not support {@link Recommender#getDataModel()}
 * or {@link Recommender#recommend(Object, int, com.planetj.taste.recommender.ItemFilter)}
 * since these involve data types which can't be transmitted in a web service.</p>
 *
 * @author Sean Owen
 */
public final class RecommenderService {

	private final Recommender recommender;

	public RecommenderService() {
		// Assuming that this has already been initialized by RecommenderServlet
		recommender = RecommenderSingleton.getInstance().getRecommender();
	}

	public String[][] recommend(final String userID, final int howMany) throws Exception {
		final List<RecommendedItem> recommendations = recommender.recommend(userID, howMany);
		final String[][] itemIDsAndPrefs = new String[recommendations.size()][2];
		int i = 0;
		for (final RecommendedItem item : recommendations) {
			itemIDsAndPrefs[i][0] = String.valueOf(item.getValue());
			itemIDsAndPrefs[i][1] = item.getItem().getID().toString();
			i++;
		}
		return itemIDsAndPrefs;
	}

	public double estimatePreference(final String userID, final String itemID) throws Exception {
		return recommender.estimatePreference(userID, itemID);
	}

	public void setPreference(final String userID, final String itemID, final double value) throws Exception {
		recommender.setPreference(userID, itemID, value);
	}

	public void refresh() throws Exception {
	    recommender.refresh();
	}

}
