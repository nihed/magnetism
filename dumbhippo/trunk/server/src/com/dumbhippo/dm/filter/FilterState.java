package com.dumbhippo.dm.filter;

/**
 * FilterState represents a node in the state graph generated by FilterStateMap. See the
 * class description for that class for more extensive documentation.
 * 
 * @author otaylor
 */
public class FilterState {
	public static FilterState TRUE_STATE = new FilterState(TrueFilter.getInstance(), new Condition[] {}, false);
	public static FilterState FALSE_STATE = new FilterState(FalseFilter.getInstance(), new Condition[] {}, false);
	
	private Filter filter;
	private Condition[] conditions;
	private int childCount;
	private FilterState[] childStates;
	private int index = -1;
	private int phase;
	private boolean root;

	FilterState(Filter filter, Condition[] conditions, boolean singlePhase) {
		this.filter = filter;
		this.conditions = conditions;
		
		if (conditions.length == 0)
			phase = 3;
		else if (singlePhase)
			phase = 0;
		else
			phase = conditions[0].getType().getProcessingPhase();

		switch (phase) {
		case 0:
		case 2:
			childCount = 1;
			break;
		case 1:
			childCount = 1;
			while (childCount < conditions.length && conditions[childCount].getType().getProcessingPhase() == 1)
				childCount++;
			break;
		case 3:
			childCount = 0;
			break;
		}
		
		this.childStates = new FilterState[childCount * 2];
	}
	
	public Filter getFilter() {
		return filter;
	}
	
	public int getPhase() {
		return phase;
	}
	
	public int getChildCount() {
		return childCount;
	}
	
	public void setChildState(int index, boolean value, FilterState state) {
		childStates[index * 2 + (value ? 1 : 0)] = state; 
	}
	
	public FilterState getChildState(Condition condition, boolean value) {
		for (int i = 0; i < childCount; i++) {
			if (conditions[i] == condition)
				return getChildState(index, value);
		}
		
		return null;
	}
	
	public Condition getChildCondition(int index) {
		return conditions[index];
	}
	
	public FilterState getChildState(int index, boolean value) {
		return childStates[index * 2 + (value ? 1 : 0)];
	}
	
	public boolean isRoot() {
		return root;
	}
	
	public void setRoot(boolean root) {
		this.root = root;
	}
	
	public void setIndex(int index) {
		this.index = index;
	}
	
	public String getName() {
		if (getPhase() == 3)
			return filter == TrueFilter.getInstance() ? "TrueState" : "FalseState";
		else
			return "State" + index;
	}
	
	@Override 
	public String toString() {
		return getName() + ": " + filter;
	}
}
