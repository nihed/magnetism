hibernate.transaction.manager_lookup_class=org.hibernate.transaction.JBossTransactionManagerLookup
hibernate.connection.release_mode=after_statement
hibernate.transaction.flush_before_completion=false
hibernate.transaction.auto_close_session=false
hibernate.query.factory_class=org.hibernate.hql.ast.ASTQueryTranslatorFactory
hibernate.hbm2ddl.auto=create-drop
#hibernate.hbm2ddl.auto=create
hibernate.cache.use_query_cache=true
#hibernate.cache.provider_class=org.hibernate.cache.HashtableCacheProvider
# Don't put data into the cache if it's already there. Putting existing data into the 
# cache when there is no change is expensive in the clustered case and causes lock conflicts.
# Should be the default but isn't (filed as http://jira.jboss.com/jira/browse/EJBTHREE-707).
hibernate.cache.use_minimal_puts=true
# Clustered cache with using the JBoss tree cache; we use a custom Provider to get a slightly 
# patched version of the hibernate tree cache glue to workaround 
# http://jira.jboss.com/jira/browse/JBCACHE-785
# hibernate.cache.provider_class=org.jboss.ejb3.entity.TreeCacheProviderHook
hibernate.cache.provider_class=com.dumbhippo.persistence.TreeCacheProviderHook
# This would be for using optimistic node locking in the TreeCache. It doesn't 
# really work, however
#hibernate.cache.provider_class=com.dumbhippo.persistence.OptimisticTreeCacheProviderHook
hibernate.treecache.mbean.object_name=jboss.cache:service=EJB3EntityTreeCache
hibernate.connection.datasource=java:/DefaultDS
hibernate.jndi.java.naming.factory.initial=org.jnp.interfaces.NamingContextFactory
hibernate.jndi.java.naming.factory.url.pkgs=org.jboss.naming:org.jnp.interfaces
@@if mysqlEnabled
hibernate.dialect=org.hibernate.dialect.MySQLDialect
@@elif pgsqlEnabled
hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
@@else
@error No database
@@endif
hibernate.search.worker.backend = com.dumbhippo.search.IndexProcessorFactory
hibernate.search.default.indexBase=@@luceneIndexDir:properties@@
